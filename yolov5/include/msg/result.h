// Generated by gencpp from file yolov5/result.msg
// DO NOT EDIT!


#ifndef YOLOV5_MESSAGE_RESULT_H
#define YOLOV5_MESSAGE_RESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolov5
{
template <class ContainerAllocator>
struct result_
{
  typedef result_<ContainerAllocator> Type;

  result_()
    : box()
    , conf(0.0)
    , class_id(0.0)  {
      box.assign(0.0);
  }
  result_(const ContainerAllocator& _alloc)
    : box()
    , conf(0.0)
    , class_id(0.0)  {
  (void)_alloc;
      box.assign(0.0);
  }



   typedef boost::array<float, 4>  _box_type;
  _box_type box;

   typedef float _conf_type;
  _conf_type conf;

   typedef float _class_id_type;
  _class_id_type class_id;





  typedef boost::shared_ptr< ::yolov5::result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolov5::result_<ContainerAllocator> const> ConstPtr;

}; // struct result_

typedef ::yolov5::result_<std::allocator<void> > result;

typedef boost::shared_ptr< ::yolov5::result > resultPtr;
typedef boost::shared_ptr< ::yolov5::result const> resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolov5::result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolov5::result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolov5::result_<ContainerAllocator1> & lhs, const ::yolov5::result_<ContainerAllocator2> & rhs)
{
  return lhs.box == rhs.box &&
    lhs.conf == rhs.conf &&
    lhs.class_id == rhs.class_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolov5::result_<ContainerAllocator1> & lhs, const ::yolov5::result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolov5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolov5::result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolov5::result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5::result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolov5::result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5::result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolov5::result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolov5::result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a896fcc81f2c15c77d9ab0ef779f9c66";
  }

  static const char* value(const ::yolov5::result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa896fcc81f2c15c7ULL;
  static const uint64_t static_value2 = 0x7d9ab0ef779f9c66ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolov5::result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolov5/result";
  }

  static const char* value(const ::yolov5::result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolov5::result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[4] box\n"
"float32 conf\n"
"float32 class_id\n"
;
  }

  static const char* value(const ::yolov5::result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolov5::result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box);
      stream.next(m.conf);
      stream.next(m.class_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolov5::result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolov5::result_<ContainerAllocator>& v)
  {
    s << indent << "box[]" << std::endl;
    for (size_t i = 0; i < v.box.size(); ++i)
    {
      s << indent << "  box[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.box[i]);
    }
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "class_id: ";
    Printer<float>::stream(s, indent + "  ", v.class_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLOV5_MESSAGE_RESULT_H
